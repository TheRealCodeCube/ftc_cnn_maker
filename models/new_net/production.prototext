name: "TestModel"
layer {
	name: "data"
	type: "Input"
	top: "data"
	input_param {
		shape: {
			dim: 1
			dim: 3
			dim: 256
			dim: 256
		}
	}
}
#256x256x3
layer {
	name: "conv1"
	type: "Convolution"
	bottom: "data"
	top: "conv1"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	convolution_param {
		num_output: 2
		kernel_size: 5
		stride: 2
		weight_filler {
			type: "gaussian"
			std: 0.01
		}
		bias_filler {
			type: "constant"
			value: 0
		}
	}
}
#128x128x2
layer {
	name: "conv2"
	type: "Convolution"
	bottom: "conv1"
	top: "conv2"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	convolution_param {
		num_output: 10
		kernel_size: 5
		stride: 2
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
}
#64x64x10
layer {
	name: "pool2"
	type: "Pooling"
	bottom: "conv2"
	top: "pool2"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	}
}
#32x32x10
layer {
	name: "conv3"
	type: "Convolution"
	bottom: "pool2"
	top: "conv3"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	convolution_param {
		num_output: 30
		kernel_size: 3
		stride: 1
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
}
#32x32x30
layer {
	name: "pool3"
	type: "Pooling"
	bottom: "conv3"
	top: "pool3"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	}
}
#16x16x30
layer {
	name: "conv4"
	type: "Convolution"
	bottom: "pool3"
	top: "conv4"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	convolution_param {
		num_output: 50
		kernel_size: 3
		stride: 1
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
}
#16x16x50
layer {
	name: "pool4"
	type: "Pooling"
	bottom: "conv4"
	top: "pool4"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	}
}
#8x8x50
layer {
	name: "ip1"
	type: "InnerProduct"
	bottom: "pool4"
	top: "ip1"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	inner_product_param {
		num_output: 500
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
}
layer {
	name: "relu1"
	type: "ReLU"
	bottom: "ip1"
	top: "ip1r"
}
#500
layer {
	name: "ip2"
	type: "InnerProduct"
	bottom: "ip1r"
	top: "ip2"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	inner_product_param {
		num_output: 10
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
}
#10
layer {
	name: "loss"
	type: "Softmax"
	bottom: "ip2"
	top: "loss"
}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
